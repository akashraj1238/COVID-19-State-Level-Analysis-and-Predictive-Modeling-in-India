data <- read.csv(file.choose())
View(data)
datapivot <- gather(data,Bill_type,Bill_Amt,
gasbill:waterbill)
View(datapivot)
# gather()  - Reshaping wide format to long format
# syntax : gather(data,key,value,...)
?gather
# spread()  - Reshaping long format to wide format
# syntax : spread(data,key,value)
dataspread <- spread(datapivot, Bill_type,Bill_Amt)
View(dataspread)
head(data)
# separate()  - Split one column into multiple columns
# syntax : separate(data,col,into,sep)
datasep <- separate(data,Date,c("Day","Month","Year"),
sep="-")
head(datasep)
# unite() - to merge columns
# syntax : unite(data,col,cols to merge,sep)
dataunite <- unite(datasep, Date, c("Day","Month","Year"),
sep="/")
head(dataunite)
# unite() - to merge columns
# syntax : unite(data,col,cols to merge,sep)
dataunite <- unite(datasep, Date55, c("Day","Month","Year"),
sep="/")
head(dataunite)
# unite() - to merge columns
# syntax : unite(data,col,cols to merge,sep)
dataunite <- unite(datasep, Date, c("Day","Month","Year"),
sep="/")
head(dataunite)
datauni <- unite(data,"Place",c(city,state), sep=", ")
head(datauni)
datauni <- unite(data, Place ,c(city,state), sep=", ")
head(datauni)
datauni <- unite(data,"Place",c(city,state), sep=", ")
head(datauni)
# Replace NAs in a data frame using tidyr package
library(tidyr)
df <- data.frame(x = c(1, 2, NA), y = c("a", NA, "b"))
df
df %>% replace_na(list(x = 0, y = "unknown"))
#OR
replace_na(df,list(x = 0, y = "unknown"))
drop_na(df)
#OR
df%>% drop_na
# Without the %>% operator
library('sqldf')
View(mtcars)
a <- filter(mtcars,carb>1)
View(a)
b <- group_by(a, cyl)
View(b)
c <- summarise(b, Avg_mpg = mean(mpg))
c
c <- summarise(a, Avg_mpg = mean(mpg))
c
c <- summarise(b, Avg_mpg = mean(mpg))
c
d <- arrange(c, desc(Avg_mpg))
print(d)
# With the %>% operator
mtcars %>%
filter(carb > 1) %>%
group_by(cyl) %>%
summarise(Avg_mpg = mean(mpg)) %>%
arrange(desc(Avg_mpg))
#********************************************
View(starwars)
dim(starwars)
#we can select all character with light skin color and brown eyes with:
View(starwars %>% filter(skin_color == "light", eye_color == "brown"))
#This is roughly equivalent to this base R code:
starwars[starwars$skin_color == "light" & starwars$eye_color == "brown", ]
#arrange() works similarly to filter() except that instead of filtering or selecting rows,
#it reorders them.
View(starwars %>% arrange(height))
View(starwars %>% arrange(height,mass))
#Use desc() to order a column in descending order:
starwars %>% arrange(desc(height))
#Choose rows using their position with slice()
#slice() lets you index rows by their (integer) locations.
#It allows you to select, remove, and duplicate rows.
#We can get characters from row numbers 5 through 10.
starwars%>%slice(5:10)
#slice_sample() randomly selects rows.
#Use the option prop to choose a certain proportion of the cases.
starwars %>% slice_sample(n = 5)
#slice_sample() randomly selects rows.
#Use the option prop to choose a certain proportion of the cases.
starwars %>% slice_sample(n = 5)
starwars %>% slice_sample(prop = 0.1)
#slice_min() and slice_max() select rows with highest or lowest values of a variable.
#Note that we first must choose only the values which are not NA.
starwars %>%
filter(!is.na(height)) %>%
slice_max(height, n = 3)
#Select columns with select()
starwars %>% select(hair_color, skin_color, eye_color)
# Select all columns between hair_color and eye_color (inclusive)
starwars %>% select(hair_color:eye_color)
# Select all columns except those from hair_color to eye_color (inclusive)
starwars %>% select(!(hair_color:eye_color))
# Select all columns ending with color
starwars %>% select(ends_with("color"))
#Add new columns with mutate()
starwars %>% mutate(height_m = height / 100)
print(n=...)
print(n=6)
print(n=height_m)
#Add new columns with mutate()
zzz<-starwars %>% mutate(height_m = height / 100)
#Add new columns with mutate()
starwars %>% mutate(height_m = height / 100)
View(zzz)
View(zzz)
#piecharts
#it depicts a special chart that uses 'pie slices' where each
#sector shows the relative sizes of data
#pie function used to create pie chart
#syntax:pie(x,labels,radius,main,col)
x<-c(23,56,20,63)
labels<-c("A","B","C","D")
pie(x,labels)
#piecharts
#it depicts a special chart that uses 'pie slices' where each
#sector shows the relative sizes of data
#pie function used to create pie chart
#syntax:pie(x,labels,radius,main,col)
x<-c(23,56,20,63)
#piecharts
#it depicts a special chart that uses 'pie slices' where each
#sector shows the relative sizes of data
#pie function used to create pie chart
#syntax:pie(x,labels,radius,main,col)
x<-c(23,56,20,63)
labels<-c("A","B","C","D")
data<-iris
library(plotly)
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width)
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="line")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="trendline")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="lines",mode="markers")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
?plotly
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
legend("rightupper")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width")
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width"
xaxis=list("Sepal Length"))
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width",
xaxis=list(title="Sepal Length"))
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width",
xaxis=list(title="Sepal Length"),
yaxis=list(title="Sepal Width"))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width"
xlab="Sepal Length") +
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width"
xlab="Sepal Length") +
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width"
xlabs="Sepal Length") +
library(ggplot2)
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width"
xlabs="Sepal Length") +
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width"
xlab="Sepal Length") +
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
xlab="Sepal Length") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
xlabs="Sepal Length") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
x="Sepal Length") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
x="Sepal Length", y="Sepal Width") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
x="Sepal Length", y="Sepal Width") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
names(iris)
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
x="Sepal Length", y="Sepal Width", color="brown") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
x="Sepal Length", y="Sepal Width") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="red",size=10))
data %>%
ggplot(aes(Sepal.Length,Sepal.Width,col=Species)) +
geom_point(size=2,alpha=0.5) +
labs(title = "Distribution of Sepal.Length wrt Sepal.Width",
x="Sepal Length", y="Sepal Width") +
theme_bw() +
facet_wrap(~Species) +
geom_smooth(method="lm", se=FALSE,color="black") +
theme(axis.text=element_text(color="brown",size=10))
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width",
xaxis=list(title="Sepal Length"),
yaxis=list(title="Sepal Width"))
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers",color~=Species) %>%
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers",color~=Species) %>%
?plotly
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers",color~=Species) %>%
?plotly
library(plotly)
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers",color~=Species) %>%
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width",
xaxis=list(title="Sepal Length"),
yaxis=list(title="Sepal Width"))
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,color~=Species,mode="markers") %>%
data %>%
plot_ly(x=~Sepal.Length,y=~Sepal.Width,color=~Species,mode="markers") %>%
layout(title="Distribution of Sepal.Length wrt Sepal.Width",
xaxis=list(title="Sepal Length"),
yaxis=list(title="Sepal Width"))
plot_ly(z = ~cor(iris[, 1:4]), type = "heatmap",
colorscale = "Viridis", showscale = FALSE) %>%
layout(title = "Correlation Heatmap of Iris Features",
xaxis = list(ticktext = colnames(iris[, 1:4]),
tickvals = seq(0.5, 4.5, by = 1),
title = "Features"),
yaxis = list(ticktext = colnames(iris[, 1:4]),
tickvals = seq(0.5, 4.5, by = 1),
title = "Features"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplo2)
library(ggplot2)
data<-mtcars
names(data)
head(mtcars,6)
data %>% name<-data.row
data %>% data$name<-data.row
data %>% data$name<-names(data.row)
data %>% data$name<-row.names()
data %>% name<-row.names()
library(ggplot2)
data<-mtcars
head(mtcars,6)
names(data)
data %>% name<-row.names()
data <- data %>% mutate(name = row.names(.))
library(dplyr)
data<-mtcars
head(mtcars,6)
names(data)
data <- data %>% mutate(name = row.names(.))
data <- data %>% mutate(name = row.names())
data$name
head(mtcars,6)
data$name
data$name<-row.names()
data$name<-row.names
library(ggplot2)
library(dplyr)
data<-mtcars
head(mtcars,6)
names(data)
data$name<-row.names
data$name<-row.names(data$name)
data$name<-c(row.names)
data$name<-list(row.names)
data$model <- rownames(data)
data$model <- rownames(mtcars)
data$model <- row.names(mtcars)
data$model <- row.name(mtcars)
data$model <- row.names(mtcars)
head(mtcars,6)
row.names()
data.row.names()
data$row.names()
data$row.names
data(names)
data(row.names)
row.names(data)
data$model <- row.names(data)
data$model <- C(1:100)
data$model <- C(1)
data$model
row.names(data)
head(mtcars,6)
data %>%
ggplot(aes(model,hp))
data %>%
ggplot(aes(model,hp)) +
geom_bar()
data %>%
ggplot(aes(model,hp)) +
geom_col()
library(ggplot2)
library(dplyr)
data<-mtcars
head(mtcars,6)
names(data)
data$model
row.names(data)
data %>%
ggplot(aes(model,hp)) +
geom_col()
data %>%
ggplot(aes(model,hp)) +
geom_col()
data %>%
ggplot(aes(model,hp)) +
geom_col()
data %>%
ggplot(aes(model,hp)) +
geom_col()
data %>%
ggplot(aes("model","hp")) +
geom_col()
data %>%
ggplot(aes("hp")) +
geom_col()
data %>%
ggplot(aes(x="hp")) +
geom_col()
data %>%
ggplot(aes(x="hp")) +
geom_bar()
data %>%
ggplot(aes(x="hp")) +
geom_bar(stat=identity())
data %>%
ggplot(aes(hp)) +
geom_bar(stat=identity)
data %>%
ggplot(aes(hp)) +
geom_bar()
data %>%
ggplot(aes(model)) +
geom_bar()
head(mtcars,6)
data %>%
ggplot(aes(hp)) +
geom_bar()
data %>%
ggplot(aes(hp,model)) +
geom_bar()
data %>%
ggplot(aes(hp)) +
geom_bar()
head(mtcars, n=3) # it will display management related content
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
# downloading the data
# if you want to download the data from yahoo or google, default is yahoo
getSymbols("mtcars") # downloading data for apple
head(mtcars, n=3) # it will display management related content
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
chartSeries(mtcars,
type="line",
theme = chartTheme('white'))
# downloading the data
# if you want to download the data from yahoo or google, default is yahoo
getSymbols("AAPL") # downloading data for apple
head(AAPL, n=3) # it will display management related content
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
library("quantmod")
# downloading the data
# if you want to download the data from yahoo or google, default is yahoo
getSymbols("AAPL") # downloading data for apple
head(AAPL, n=3) # it will display management related content
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
addBBands(n=20, sd=2)
chartSeries(AAPL,
type="boxplot",
theme = chartTheme('white'))
chartSeries(AAPL,
type="boxplot",
theme = chartTheme('white'))
chartSeries(AAPL,
type="boxplot",
theme = chartTheme('white'))
library("quantmod")
library("quantmod")
# downloading the data
# if you want to download the data from yahoo or google, default is yahoo
getSymbols("AAPL") # downloading data for apple
head(AAPL, n=3) # it will display management related content
chartSeries(AAPL,
type="boxplot",
theme = chartTheme('white'))
chartSeries(AAPL,
type="line",
theme = chartTheme('white'))
addBBands(n=20, sd=2)
n <- as.integer(readline(prompt = "Enter the value of n: "))
gc()
n <- as.integer(readline(prompt = "Enter the value of n: "))
tdata <- as.data.frame(cbind(c(1,1,1,1,1,2,2,2,2,2), m2))
#----------------------------------------------------------------------
m2 <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
tdata <- as.data.frame(cbind(c(1,1,1,1,1,2,2,2,2,2), m2))
tapply(tdata$V2, tdata$V1, mean)
m2
tdata
?factor
#**************************************************
v<-c(13,22,28,7,31)
w<-c(11,13,32,6,35)
x<-c(12,22,15,34,35)
plot(v,type="o",col="green",xlab="Month",ylab="temperature")
lines(w,type="o",col="red")
lines(x,type="o",col="blue")
#***********************************************
v<-c(13,22,28,7,31)
# type="s" reresents the stair case
plot(v,type="s",col="green",xlab="Month",ylab="temperature")
shiny::runApp('R Shiny Project')
runApp('R Shiny Project')
runApp('R Shiny Project')
